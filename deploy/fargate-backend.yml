AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcId:
    Type: String
    Description: The VPC that the service is running inside of
    Default: vpc-c1ef9ca8
  ApplicationName:
    Type: String
    Description: Name of the application. This is consistent across the stacks.
  DbAddress:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /default/db/db-address
  DbPort:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /default/db/db-port
  DevEnvironment:
    Type: String
    Default: production
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  AppContainerPort:
    Type: Number
    Default: 8000
    Description: What port that the application expects traffic on
  ListenerPort:
    Type: Number
    Default: 443
    Description: What port that the load balancer listener expects traffic on
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ApplicationName}-backend
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AllowSecretManager
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowEcsToUseSecretManager
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
  ECSTaskConnectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowConnectToTask
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowConnectionToTask
                Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ApplicationName
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskConnectRole
      ContainerDefinitions:
        - Name: app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ApplicationName}:backend-latest
          PortMappings:
            - ContainerPort: !Ref AppContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref AppLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${ApplicationName}/backend-app
          Environment:
            - Name: DEV_ENVIRONMENT
              Value: !Ref DevEnvironment
            - Name: DB_ADDRESS
              Value: !Ref DbAddress
            - Name: DB_PORT
              Value: !Ref DbPort
            - Name: AWS_DEFAULT_REGION
              Value: !Sub eu-central-1
          Secrets:
            - Name: BREVO_API_KEY
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:default/app-config-secrets-uGKK9M:brevo-api-key::'
            - Name: AUTH_VERIFICATION_SECRET
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:default/app-config-secrets-uGKK9M:auth-verification-secret::'
            - Name: GOOGLE_OAUTH_CLIENT_ID
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:default/app-config-secrets-uGKK9M:google-oauth-client-id::'
            - Name: GOOGLE_OAUTH_CLIENT_SECRET
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:default/app-config-secrets-uGKK9M:google-oauth-client-secret::'
            - Name: DB_USER
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:default/db-credentials-Gt4V0F:username::'
            - Name: DB_PASSWORD
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:default/db-credentials-Gt4V0F:password::'
            - Name: AWS_ACCESS_KEY_ID
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:default/db-credentials-Gt4V0F:aws-cli-key::'
            - Name: AWS_SECRET_ACCESS_KEY
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:default/db-credentials-Gt4V0F:aws-cli-secret::'
          Command:
            - /bin/sh
            - '-c'
            - echo 'Alembic migration' && alembic upgrade head && echo 'Starting server' && python app/main.py
  Service:
    Type: AWS::ECS::Service
    DependsOn: PublicLoadBalancerListener
    Properties:
      ServiceName: !Ref ApplicationName
      Cluster: !Sub ${ApplicationName}-backend
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - subnet-3cb7fc55
            - subnet-9e8de3e5
            - subnet-257d556f
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref AppContainerPort
          TargetGroupArn: !Ref ServiceTargetGroup
      EnableExecuteCommand: true
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for service
      VpcId: !Ref VpcId
  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: !Ref AppContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 0
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - subnet-3cb7fc55
        - subnet-9e8de3e5
        - subnet-257d556f
      SecurityGroups:
        - !Ref PublicLoadBalancerSG
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ServiceTargetGroup
                Weight: 100
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: !Ref ListenerPort
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:eu-central-1:042533097213:certificate/6082a673-6d76-4caa-a8ca-9a628bbbdc17
  ServiceIngressFromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ServiceSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt PublicLoadBalancerSG.GroupId
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/fargate/${ApplicationName}-backend
      RetentionInDays: 7
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: paca.middle4.net.
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt PublicLoadBalancer.DNSName
      HostedZoneId: Z03365863LDSINY686341