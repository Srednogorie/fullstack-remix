AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcId:
    Type: String
    Description: The VPC that the service is running inside of
    Default: vpc-c1ef9ca8
  ApplicationName:
    Type: String
    Description: Name of the application. This is consistent across the stacks.
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  AppContainerPort:
    Type: Number
    Default: 3000
    Description: What port that the application expects traffic on
  ListenerPort:
    Type: Number
    Default: 443
    Description: What port that the load balancer listener expects traffic on
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

Resources:
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ApplicationName}-frontend-cluster

  # This is a role which is used within Fargate to allow the Fargate agent
  # to download images, and upload logs.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      # TODO What is this for?
      Path: /

      # This role enables basic features of ECS. See reference:
      # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-iam-awsmanpol.html#security-iam-awsmanpol-AmazonECSTaskExecutionRolePolicy
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AllowSecretManager
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowEcsToUseSecretManager
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"

  # Allow the task to access the underlining resources so we connect to the 
  # container from the cli
  ECSTaskConnectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: AllowConnectToTask
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowConnectionToTask
                Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"

  # The task definition. This is a simple metadata description of what
  # container(s) to run, and what resource requirements the task has
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ApplicationName
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskConnectRole
      ContainerDefinitions:
        # Application container
        - Name: app
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ApplicationName}:frontend-latest"
          PortMappings:
            - ContainerPort: !Ref AppContainerPort
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref AppLogGroup
              awslogs-region: !Ref AWS::Region
              # What is this
              awslogs-stream-prefix: !Sub "${ApplicationName}/frontend-app"
          Command:
            - npm run start
  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    # Avoid race condition between ECS service creation and associating
    # the target group with the LB
    DependsOn: PublicLoadBalancerListener
    Properties:
      ServiceName: !Ref ApplicationName
      Cluster: !Sub ${ApplicationName}-frontend-cluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - subnet-3cb7fc55
            - subnet-9e8de3e5
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref AppContainerPort
          TargetGroupArn: !Ref ServiceTargetGroup
      EnableExecuteCommand: true

  # Security group that limits network access
  # to the task
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for service
      VpcId: !Ref VpcId

  # Keeps track of the list of tasks for the service
  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: !Ref AppContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 0

  # A public facing load balancer, this is used as ingress for
  # public facing internet traffic.
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # Move this to parameter
        - subnet-3cb7fc55
        - subnet-9e8de3e5
      SecurityGroups:
        - !Ref PublicLoadBalancerSG

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ServiceTargetGroup
                Weight: 100
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: !Ref ListenerPort
      Protocol: HTTPS
      Certificates:
        # Move this to parameter
        - CertificateArn: arn:aws:acm:eu-central-1:042533097213:certificate/6082a673-6d76-4caa-a8ca-9a628bbbdc17

  # Open up the service's security group to traffic originating
  # from the security group of the load balancer.
  ServiceIngressFromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ServiceSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt 'PublicLoadBalancerSG.GroupId'

  # This log group stores the stdout logs from the app
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/fargate/${ApplicationName}-frontend"
      # Explicit retention time
      RetentionInDays: 7

  Route53RecordSet:
    Type: "AWS::Route53::RecordSet"
    Properties:
      # Move this to parameter - front & back?
      Name: "frontend.middle4.net."
      Type: "CNAME"
      TTL: 300
      ResourceRecords: 
        - !GetAtt PublicLoadBalancer.DNSName
      # Move this to parameter
      HostedZoneId: "Z03365863LDSINY686341"
